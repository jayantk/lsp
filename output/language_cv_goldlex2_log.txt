data/cobot/set/language_geography/small_domains/all/
data/cobot/set/language_geography/small_domains/fl/
data/cobot/set/language_geography/small_domains/ga/
data/cobot/set/language_geography/small_domains/geoqa2/
skipping data/cobot/set/language_geography/small_domains/geoqa2/ no features.
data/cobot/set/language_geography/small_domains/ky/
data/cobot/set/language_geography/small_domains/mi/
data/cobot/set/language_geography/small_domains/nc/
data/cobot/set/language_geography/small_domains/oh/
data/cobot/set/language_geography/small_domains/ok/
data/cobot/set/language_geography/small_domains/pa/
data/cobot/set/language_geography/small_domains/sc/
data/cobot/set/language_geography/small_domains/test_domain/
data/cobot/set/language_geography/small_domains/tn/
data/cobot/set/language_geography/small_domains/va/
data/cobot/set/language_geography/small_domains/validation_domain/
data/cobot/set/language_geography/small_domains/wv/
files[data/cobot/set/language_geography/small_domains/all/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/fl/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/ga/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/ky/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/mi/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/nc/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/oh/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/ok/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/pa/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/sc/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/test_domain/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/tn/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/va/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/validation_domain/osm_kb.domain.relations, data/cobot/set/language_geography/small_domains/wv/osm_kb.domain.relations]
myline->is Tallahassee a city ?;Tallahassee;1;(lambda $x (and (city $x) (kb-Tallahassee $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->is Miami a city ?;Miami;1;(lambda $x (and (city $x) (kb-Miami $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->is Florida a state ?;Florida;1;(lambda $x (and (state $x) (kb-Florida $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Miami a state ?;;1;(lambda $x (and (state $x) (kb-Miami $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Tallahassee a state ?;;1;(lambda $x (and (state $x) (kb-Tallahassee $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Key Largo an island ?;Key Largo;1;(lambda $x (and (island $x) (kb-Key_Largo $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Miami an island ?;;1;(lambda $x (and (island $x) (kb-Miami $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Tallahassee a national park ?;;1;(lambda $x (and (park $x) (kb-Tallahassee $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Tallahassee a city in Florida ?;Tallahassee;1;(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->is Miami a city in Florida ?;Miami;1;(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->which island is in Florida ?;Key Largo;1;(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what national park is in Florida ?;Everglades National Park;1;(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what national park is to the south west of Miami ?;Everglades National Park;1;(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what national park is to the north west of Key Largo ?;Everglades National Park;1;(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which cities are to the north of Key Largo ?;Miami,Daytona Beach,Tallahassee;1;(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 1] : 1.0>
myline->which city is to the south east of Tallahassee ?;Daytona Beach,Miami;1;(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->which city is to the north west of Daytona Beach ?;Tallahassee;1;(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->which national park is to the south east of Tallahassee and north west of Key Largo ?;Everglades National Park;3;(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which city is to the north of Key Largo and east of Tallahassee ?;Daytona Beach,Miami;3;(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->which city is in between Daytona Beach and Key Largo ?;Miami;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->what national parks are in Florida ?;Everglades National Park;1;(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what beach city is there in Florida ?;Daytona Beach;1;(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what cities are in Florida ?;Miami,Tallahassee,Daytona Beach;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 1] : 1.0>
myline->what is the capital of Florida ?;Tallahassee;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->what are some Florida cities on the peninsula ?;Miami,Daytona Beach;3;
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->what are some Florida cities not on the peninsula ?;Tallahassee;3
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->what state has Tallahassee as its capital ?;Florida;1;(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what state is Miami in ?;Florida;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what national park is just east of Miami ?;;1;(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what are some beaches in Florida ?;Daytona Beach;1;(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what beach is on the east coast of Florida , north of Miami ?;Daytona Beach;4
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what island chain is south of the Everglades National Park ?;Key Largo;1;(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what major city is located in northern Florida ?;Tallahassee;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->what beaches are in Florida ?;Daytona Beach;1;(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what is the south most major city in Florida ?;Miami;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->what city lies between Daytona Beach and Key Largo ?;Miami;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->what state is Key Largo in ?;Florida;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what Florida national park is at the southern tip of the peninsula ?;Everglades National Park;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what state is Daytona Beach in ?;Florida;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Key Largo an island ?;Key Largo;1;(lambda $x (and (kb-Key_Largo $x) (island $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what states are there ?;Georgia,Alabama;0;(lambda $x (and (state $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is west of Georgia ?;Alabama;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is east of Alabama ?;Georgia;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state borders Alabama ?;Georgia;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state borders Georgia ?;Alabama;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what cities are there ?;Atlanta,Macon,Montgomery,Birmingham;0;(lambda $x (and (city $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0>
myline->what cities are in Alabama ?;Montgomery,Birmingham;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what cities are in Georgia ?;Atlanta,Macon;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what state is Atlanta in ?;Georgia;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is Macon in ?;Georgia;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is Montgomery in ?;Alabama;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is Birmingham in ?;Alabama;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what city is south of Birmingham ?;Montgomery;1;(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what city is south of Atlanta ?;Macon;1;(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what city is north of Macon ?;Atlanta;1;(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what city is north of Montgomery ?;Birmingham;1;(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the southernmost city in Alabama ?;Montgomery;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what is the southernmost city in Georgia ?;Macon;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what is the farthest city from Birmingham ?;Macon;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what is the farthest city from Macon ?;Birmingham;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the closest city to Birmingham ?;Montgomery;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what is the closest city to Atlanta ?;Macon;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are in states that border Alabama ?;Atlanta,Macon;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are in states that border Georgia ?;Birmingham,Montgomery;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what city is north of Montgomery in the state bordering Georgia ?;Birmingham;3;(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->which of these are lakes ?;Lake Michigan,Lake Huron;0;(lambda $x (and (lake $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->name the cities;Detroit,Grand Rapids,Milwaukee;0;(lambda $x (and (city $x)))
<[0, 1] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->name the states;Michigan,Wisconsin;0;(lambda $x (and (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->what cities are in Michigan;Detroit,Grand Rapids;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
<[0, 1] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what lakes are near Michigan;Lake Michigan,Lake Huron;1;(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what lakes are near Wisconsin;Lake Michigan;1;(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what lake is west of Michigan;Lake Michigan;1;(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what states border west of Michigan ?;Wisconsin;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->what state is east of Wisconsin;Michigan;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what cities are on Lake Michigan;Milwaukee;1;(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what is the largest city in Michigan ?;Detroit;4
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what is the second largest city in Michigan ?;Grand Rapids;4
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what is the largest city in Wisconsin ?;Milwaukee;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->name the lakes bordering Michigan ?;Lake Michigan,Lake Huron;1;(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is east of Grand Rapids ?;Detroit;1;(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is west of Detroit ?;Milwaukee,Grand Rapids;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what city is west of Grand Rapids ?;Milwaukee;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what lake borders Wisconsin ?;Lake Michigan;1;(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what lake is east of Lake Michigan ?;Lake Huron;1;(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what states are on Lake Michigan;Michigan,Wisconsin;1;(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->what borders Michigan ?;Lake Huron,Lake Michigan,Wisconsin;1;(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->which city is closest to the ocean ?;Myrtle Beach;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what is the capital of North Carolina ?;Raleigh;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which state is further north ?;North Carolina;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which state is larger ?;North Carolina;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which are cities ?;Raleigh,Charlotte,Greensboro,Myrtle Beach;0;(lambda $x (and (city $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which forest is in North Carolina ?;Uwharrie National Forest;1;(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->what is the northernmost city in North Carolina ?;Greensboro;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what cities are in North Carolina ?;Raleigh,Charlotte,Greensboro;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what city is east of Greensboro in North Carolina ?;Raleigh;3;(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what city is north east of Charlotte in North Carolina ?;Greensboro;3;(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what state is south of North Carolina ?;South Carolina;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0>
myline->what city is west of Raleigh ?;Greensboro,Charlotte;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->is Myrtle Beach near North Carolina ?;Myrtle Beach;1;(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what cities are on the ocean ?;Myrtle Beach;1;(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what North Carolina city is near South Carolina ?;Charlotte;3;(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what forest is close to Charlotte ?;Uwharrie National Forest;1;(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0>
myline->what is south of Greensboro ?;Uwharrie National Forest,South Carolina;1;(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 1] : 1.0>
myline->what is north of Uwharrie National Forest ?;Greensboro;1;(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->what is north east of Uwharrie National Forest ?;Raleigh;1;(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0>
myline->which states border Texas ?;Oklahoma,Arkansas,Louisiana;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
<[0, 1] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0>
myline->which states border Louisiana ?;Texas,Arkansas,Mississippi;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0>
myline->which states border Arkansas ?;Texas,Oklahoma,Mississippi,Louisiana;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 1] : 1.0>
myline->which state is east of Oklahoma ?;Arkansas;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is east of Louisiana ?;Mississippi;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is west of Louisiana ?;Texas;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0>
myline->which state is west of Arkansas ?;Oklahoma;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0>
myline->which state is south of Arkansas ?;Louisiana;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is south of Oklahoma ?;Texas;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0>
myline->which state is north of Louisiana ?;Arkansas;1;(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is north of Texas ?;Oklahoma;1;(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0>
myline->which state is north west of Louisiana ?;Oklahoma;1;(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0>
myline->which state is north east of Texas ?;Arkansas;1;(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is south east of Oklahoma ?;Louisiana;1;(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which state is south west of Arkansas ?;Texas;1;(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0>
myline->which states are between Texas and Mississippi ?;Louisiana,Arkansas;4;
<[0, 1] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0>
myline->which states border both Texas and Arkansas ?;Oklahoma,Louisiana;4
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0>
myline->which states border both Louisiana and Arkansas ?;Texas,Mississippi;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0>
myline->what cities are there;Pittsburgh,Harrisburg,Newark,Trenton;0;(lambda $x (and (city $x)))
<[0, 1] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0>
myline->what states are there;Pennsylvania,New Jersey;0;(lambda $x (and (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->which is the city of Pittsburgh;Pittsburgh;1;(lambda $x (and (city $x) (kb-Pittsburgh $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->which is the city Harrisburg;Harrisburg;1;(lambda $x (and (city $x) (kb-Harrisburg $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->which is the city of Pittsburgh;Pittsburgh;1;(lambda $x (and (city $x) (kb-Pittsburgh $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->which is the city of Harrisburg;Harrisburg;1;(lambda $x (and (city $x) (kb-Harrisburg $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->which cities are in New Jersey;Newark,Trenton;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->which of these are in Pennsylvania;Pittsburgh,Harrisburg;1;(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->which city is in Pennsylvania;Pittsburgh,Harrisburg;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh west of Harrisburg;Pittsburgh;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->which city is west of Harrisburg;Pittsburgh;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are west of Newark;Pittsburgh,Harrisburg;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are west of Trenton;Pittsburgh,Harrisburg;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Newark east of Harrisburg;Newark;1;(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Newark east of Pittsburgh;Newark;1;(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is New Jersey east of Pennsylvania;New Jersey;1;(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is east of Pennsylvania;New Jersey;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the capital of Pennsylvania;Harrisburg;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the capital of New Jersey;Trenton;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what city is in Pennsylvania and west of Harrisburg;Pittsburgh;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what city is in Pennsylvania but east of Pittsburgh;Harrisburg;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z)))) 
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh a city ?;Pittsburgh;1;(lambda $x (and (kb-Pittsburgh $x) (city $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Newark a city ?;Newark;1;(lambda $x (and (kb-Newark $x) (city $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pennsylvania a city ?;;1;(lambda $x (and (kb-Pennsylvania $x) (city $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pennsylvania a state ?;Pennsylvania;1;(lambda $x (and (kb-Pennsylvania $x) (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh a state ?;;1;(lambda $x (and (kb-Pittsburgh $x) (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Newark a state ?;;1;(lambda $x (and (kb-Newark $x) (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->Newark is a city .;Newark;1;(lambda $x (and (kb-Newark $x) (city $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->Pittsburgh is a city .;Pittsburgh;1;(lambda $x (and (kb-Pittsburgh $x) (city $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->Harrisburg is a city .;Harrisburg;1;(lambda $x (and (kb-Harrisburg $x) (city $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->Newark is east of Pittsburgh .;Newark;1;(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Newark east of Pittsburgh ?;Newark;1;(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh east of Newark ?;;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is New Jersey a state ?;New Jersey;1;(lambda $x (and (kb-New_Jersey $x) (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->New Jersey is east of Pittsburgh .;New Jersey;1;(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is New Jersey east of Pittsburgh ?;New Jersey;1;(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh east of New Jersey ?;;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->Pittsburgh is not east of New Jersey .;Pittsburgh;1;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->Pittsburgh is west of New Jersey .;Pittsburgh;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh west of New Jersey ?;Pittsburgh;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Pittsburgh west of Harrisburg ?;Pittsburgh;1;(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->Harrisburg is east of Pittsburgh .;Harrisburg;1;(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Harrisburg west of Pittsburgh ?;;1;(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->which are cities ?;Myrtle Beach,Greenville,Charleston,Raleigh;0;(lambda $x (and (city $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 1] : 1.0, [9, 0] : 1.0>
myline->what lakes are there ?;Lake Moultrie;0;(lambda $x (and (lake $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what beaches are there ?;Myrtle Beach;0;(lambda $x (and (beach $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what bodies of water are in South Carolina ?;Lake Moultrie;1;(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what oceans are there ?;Atlantic Ocean;0;(lambda $x (and (ocean $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are forests ?;Francis Marion National Forest;0;(lambda $x (and (forest $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are national parks ?;Francis Marion National Forest;0;(lambda $x (and (park $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what ocean borders South Carolina ?;Atlantic Ocean;1;(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are in South Carolina ?;Myrtle Beach,Lake Moultrie,Greenville,Hilton Head Island,Charleston,Francis Marion National Forest;1;(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are surrounded by water ?;Hilton Head Island;1;(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are bodies of salt water ?;Atlantic Ocean;1;(lambda $x (and (body $x) (salt $x) (water $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which are bodies of fresh water ?;Lake Moultrie;1;(lambda $x (and (body $x) (fresh $x) (water $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->which places are on the Atlantic Ocean ?;Hilton Head Island,Myrtle Beach,Charleston,Francis Marion National Forest,North Carolina,South Carolina;1;(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 1] : 1.0, [8, 0] : 1.0, [9, 1] : 1.0>
myline->what state is north of South Carolina ?;North Carolina;1;(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what state borders South Carolina ?;North Carolina;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what state borders North Carolina ?;South Carolina;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 1] : 1.0>
myline->what city is northeast of Charleston ?;Myrtle Beach;1;(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what city is northwest of Charleston ?;Greenville;1;(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what major city is southeast of Greenville ?;Charleston;1;(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what major city is southwest of Myrtle Beach ?;Charleston;1;(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what island is southwest of Charleston ?;Hilton Head Island;1;(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what states are on the ocean ?;North Carolina,South Carolina;1;(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 1] : 1.0, [8, 0] : 1.0, [9, 1] : 1.0>
myline->what city is north of Myrtle Beach ?;Raleigh;1;(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 1] : 1.0, [9, 0] : 1.0>
myline->what 's the capital of North Carolina ?;Raleigh;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 1] : 1.0, [9, 0] : 1.0>
myline->what island is near Charleston ?;Hilton Head Island;1;(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what beach city is northeast of Charleston , near North Carolina ?;Myrtle Beach;3;(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what 's near Charleston ?;Hilton Head Island,Francis Marion National Forest,Lake Moultrie;1;(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what lake is close to Francis Marion National Forest ?;Lake Moultrie;1;(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->is Hilton Head Island in South Carolina ?;Hilton Head Island;1;(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0>
myline->what state is the city of Las Vegas located in ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the capital of California ?;Sacramento;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the capital of California ?;Sacramento;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is Reno in ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is Reno in ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is Fresno in ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what state is Death Valley National Park in ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is on the west from Utah ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which states are on the east from Nevada ?;Utah,Arizona;1
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 1] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is further south , St. George or Fremont ?;St. George;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 1] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is further south : Flagstaff or Bakersfield ?;Flagstaff;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 1] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Reno close to Elko ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Salt Lake City in Utah ?;Salt Lake City;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 1] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is San Jose near San Francisco ?;San Jose;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 1] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->name any two national parks in Nevada ?;Great Basin National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 1] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->name any two places near San Francisco ?;Fremont,Concord;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 1] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in what state is Grand Canyon National Park located ?;Arizona;1
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the closest big city to Utah ?;Las Vegas;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 1] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what national park lies west of Las Vegas ?;Death Valley National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city lies between Sacramento and San Francisco ?;Concord;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what mountain range borders Nevada and California ?;Sierra Nevada Mountains;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 1] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what lake lies nw of Salt Lake City ?;Great Salt Lake;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 1] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is the capital of California ?;Sacramento;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the name of the national park located east of San Francisco ?;Yosemite National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 1] : 1.0>
myline->are there deserts in Nevada ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Reno east of Sacramento ?;Reno;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Bakersfield on the Pacific Ocean ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the name of a city in Utah .;Provo,Salt Lake City;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 1] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 1] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what national parks are located in California .;Yosemite National Park,Death Valley National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 1] : 1.0>
myline->what state is Elko located in .;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is San Francisco a island ?;;0
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state is St. George ?;Utah;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 1] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state is Elko ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is on the west of Utah ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in Nevada is closest to Death Valley ?;Las Vegas;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 1] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in Utah is closest to Nevada ?;St. George;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 1] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in Nevada is closest to Sacramento ?;Reno;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->highlight the Grand Canyon National Park;Grand Canyon National Park;0
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 1] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what state lies on California 's northern border ?;Oregon;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 1] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state borders California on the east ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is the tallest mountain in California ?;Mount Whitney;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 1] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Salt Lake City closer to Reno or Sacramento ?;Reno;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->are there mountains near Salt Lake City ?;Twin Peaks;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 1] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Reno north of Las Vegas ?;Reno;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is the largest state , California or Utah ?;California;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->San Jose is in which state ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is the Grand Canyon National Park near to the Flagstaff ?;Grand Canyon National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 1] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is there any lake in Los Angeles ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state is Sacramento located;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state does Death Valley National Park fall;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is the beach located near Los Angeles;Redondo Beach,Long Beach;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 1] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 1] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which are the states lined one side by sea ?;California,Oregon;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 1] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city is directly south of Reno ?;Fresno;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 1] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what four cities are closest to Los Angeles ?;Anaheim,Long Beach,Oxnard,Huntington Beach;4
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 1] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 1] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 1] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city is closest to Redding ?;Red Bluff;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 1] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which states border Nevada ?;California,Arizona,Utah,Oregon;1
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 1] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 1] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is the biggest state in this map ?;California;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is the Long Beach near Oxnard ?;Long Beach;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 1] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is there any lake in San Francisco ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the closest city in Nevada to the California border ?;Reno;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which national park is closest to Stockton ?;Yosemite National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 1] : 1.0>
myline->is any ever green forests in California ?;Yosemite National Park;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 1] : 1.0>
myline->in which state is Las Vegas located ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which states are neighbouring Utah ?;Arizona,Nevada;1
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is the closest to Grand Canyon National Park ?;Flagstaff;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 1] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Nevada a desert ?;;0
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is closest to Red Bluff ?;Redding;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 1] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Las Vegas , Nevada closer to Death Valley National Park or Henderson , Nevada ?;Henderson;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is northwest of Concord California ?;Santa Rosa;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 1] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Redding nearer to Sacramento or Red Bluff ?;Red Bluff;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 1] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in Nevada is closest to the Grand Canyon ?;Henderson;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in Arizona is closest to Salt Lake City ?;Flagstaff;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 1] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city in California is closest to Reno ?;Sacramento;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is above Red Bluff ?;Redding;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 1] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city is to the right of Las Vegas ?;Henderson;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city is below the Grand Canyon National Park ?;Flagstaff;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 1] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is nearer to Fresno , San Jose or Bakersfield ?;Bakersfield;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is farther from Las Vegas , Fresno or Anaheim ?;Fresno;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 1] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is closer to Reno -- Sacramento or Salt Lake City ?;Sacramento;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is north of Fresno -- Stockton or Bakersfield ?;Stockton;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 1] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is closest to Red Bluff ?;Redding;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 1] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what state is Death Valley National Park located in ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is the closest to Las Vegas ?;Henderson;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->on the map , what is the westernmost city shown in Nevada ?;Henderson;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what are the names of the national parks shown on the map ?;Grand Canyon National Park,Grand Staircase-Escalante National Monument,Great Basin National Park,Yosemite National Park,Death Valley National Park
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 1] : 1.0, [14, 1] : 1.0, [15, 1] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 1] : 1.0>
myline->what is a city north of Red Bluff ?;Redding;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 1] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is the state west of Nevada ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what is a city south of Grand Canyon National Park ?;Flagstaff;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 1] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is the biggest lake in the area of Utah ?;Great Salt Lake;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 1] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state is the Death Valley National Park ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in which state is set Las Vegas ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is larger , Nevada or Arizona ?;Arizona;1
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what states are west of Arizona ?;Nevada,California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what states are not west of Arizona ?;Utah,Oregon;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 1] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 1] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is further north , Flagstaff or Stockton ?;Stockton;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 1] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is closer to Las Vegas , St. George or Bakersfield ?;St. George;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 1] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city in Nevada is located to the west of Los Angeles , California ?;Reno;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what city is closest to Las Vegas ?;Henderson;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 1] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what Nevada city is closest to the California border ?;Reno;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 1] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which state is Death Valley National Park in ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Concord north of San Jose ?;Concord;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Nevada east of Reno ?;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Sacramento south of Red Bluff ?;Sacramento;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 1] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Stockton between Fresno and Sacramento ?;Stockton;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 1] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which city is most northern ? Bakersfield or Flagstaff ?;Bakersfield;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->which is further from Bakersfield , California ? Las Vegas , Nevada or San Jose, California ?;Las Vegas;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 1] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->in what state is Reno ?;Nevada;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 1] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is Grand Canyon in Utah ?;;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->is California beside Arizona ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what state is San Francisco in ?;California;1
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0, [7, 0] : 1.0, [8, 0] : 1.0, [9, 0] : 1.0, [10, 0] : 1.0, [11, 0] : 1.0, [12, 0] : 1.0, [13, 0] : 1.0, [14, 0] : 1.0, [15, 0] : 1.0, [16, 0] : 1.0, [17, 0] : 1.0, [18, 0] : 1.0, [19, 0] : 1.0, [20, 0] : 1.0, [21, 0] : 1.0, [22, 0] : 1.0, [23, 0] : 1.0, [24, 0] : 1.0, [25, 0] : 1.0, [26, 0] : 1.0, [27, 0] : 1.0, [28, 0] : 1.0, [29, 0] : 1.0, [30, 0] : 1.0, [31, 0] : 1.0, [32, 0] : 1.0, [33, 0] : 1.0, [34, 0] : 1.0, [35, 0] : 1.0, [36, 0] : 1.0, [37, 0] : 1.0, [38, 0] : 1.0, [39, 0] : 1.0, [40, 0] : 1.0, [41, 0] : 1.0, [42, 0] : 1.0, [43, 0] : 1.0, [44, 0] : 1.0, [45, 0] : 1.0, [46, 0] : 1.0, [47, 0] : 1.0, [48, 0] : 1.0, [49, 0] : 1.0, [50, 0] : 1.0, [51, 0] : 1.0, [52, 0] : 1.0, [53, 0] : 1.0, [54, 0] : 1.0>
myline->what cities are in Tennessee ?;Memphis,Nashville,Knoxville;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what are the states ?;Alabama,Tennessee;0;(lambda $x (and (state $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->what are the national parks ?;Great Smoky Mountains National Park;0;(lambda $x (and (park $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->in which state is Knoxville ?;Tennessee;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 1] : 1.0>
myline->what city is located in eastern Tennessee ?;Knoxville;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is located in western Tennessee ?;Memphis;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is located in central Tennessee ?;Nashville;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what cities are west of Nashville ?;Memphis;1;(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what national parks are near Knoxville ?;Great Smoky Mountains National Park;1;(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what state is south of Tennessee ?;Alabama;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is in Tennessee and east of Nashville ?;Knoxville;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is in Tennessee and west of Nashville ?;Memphis;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what national parks are in Tennessee ?;Great Smoky Mountains National Park;1;(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what major city in Tennessee is closest to Alabama ?;Nashville;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->is Tennessee bigger than Alabama ?;;1;(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->does Alabama border Tennessee ?;Alabama;1;(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what cities are in Tennessee , but west of Knoxville ?;Nashville,Memphis;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what cities are in Tennessee , but east of Memphis ?;Nashville,Knoxville;3;(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what major cities and national parks are east of Nashville ?;Knoxville,Great Smoky Mountains National Park;3;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0, [6, 0] : 1.0>
myline->what city is in Tennessee , but between Knoxville and Memphis ?;Nashville;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0, [6, 0] : 1.0>
myline->what states are there;Virginia,West Virginia,North Carolina;0;(lambda $x (and (state $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0>
myline->what 's the capital of Virginia;Richmond;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what cities are in Virginia;Richmond,Virginia Beach;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what city is on the ocean;Virginia Beach;1;(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what oceans are there;Atlantic Ocean;0;(lambda $x (and (ocean $x)))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the capital of Virginia;Richmond;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the closest large city to Virginia Beach;Richmond;4;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->does West Virginia abut the Atlantic Ocean;;1;(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is south of Virginia;North Carolina;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is east of West Virginia;Virginia;1;(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are in Virginia;Virginia Beach,Richmond;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what cities in West Virginia;;1;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what city is the northernmost in Virginia;Richmond;4;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the southernmost city in West Virginia;;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what states have borders on the Atlantic Ocean;Virginia,North Carolina;1;(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are along the Atlantic Ocean;Virginia Beach;1;(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what cities are near Richmond;Virginia Beach;1;(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is west of Virginia;West Virginia;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what state is south of West Virginia;Virginia;1;(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what cities are near Richmond;Virginia Beach;1;(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what city is south east of Richmond;Virginia Beach;1;(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what states have a coast on the Atlantic Ocean ?;Virginia,North Carolina;1;(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what state contains Virginia Beach ?;Virginia;1;(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what ocean borders Virginia ?;Atlantic Ocean;1;(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what ocean borders West Virginia ?;Atlantic Ocean;1;(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
<[0, 1] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what is the capital of Virginia ?;Richmond;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is east of West Virginia , and shares a common word in its name ?;Virginia;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->what state west of Virginia also has Virginia in its name ?;West Virginia;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->is Richmond the capital of West Virginia ?;;1;(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Virginia inside of West Virginia ?;;1;(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Virginia Beach inside of West Virginia ?;;1;(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what states have Virginia in their name ?;Virginia;4;
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
myline->is Richmond the capital of Virginia ?;Richmond;1;(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Virginia Beach in the Atlantic Ocean ?;;1;(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is the Atlantic Ocean in Virginia ?;;1;(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Richmond in the Atlantic Ocean ?;;1;(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is the Atlantic Ocean in West Virginia ?;;1;(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is the Atlantic Ocean between Virginia and West Virginia ?;;4
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what states are there;Virginia,West Virginia;0;(lambda $x (and (state $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 1] : 1.0>
myline->what national parks are there;Monongahela National Forest;0;(lambda $x (and (park $x)))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what lakes are there;Tygart Lake;0;(lambda $x (and (lake $x)))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 1] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what 's the capital of Virginia;Richmond;1;(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what cities are in Virginia;Richmond;0;(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->what state is west of Virginia;West Virginia;1;(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->what state is the Monongahela National Forest in ?;West Virginia;1;(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 1] : 1.0>
myline->is there a national park in West Virginia ?;Monongahela National Forest;1;(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 1] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Richmond east of West Virginia ?;Richmond;1;(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 1] : 1.0, [3, 0] : 1.0, [4, 0] : 1.0, [5, 0] : 1.0>
myline->is Virginia east of West Virginia ?;Virginia;1;(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
<[0, 0] : 1.0, [1, 0] : 1.0, [2, 0] : 1.0, [3, 0] : 1.0, [4, 1] : 1.0, [5, 0] : 1.0>
[edu.cmu.ml.rtw.users.jayantk.grounding.Domain@70a2d0d, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@2d13b417, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@6894691f, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@6781a7dc, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@7133919a, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@709c4f85, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@2628de85, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@45290155, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@71696ec, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@5c0e6396, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@34ac3c11, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@179b9b1b, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@68e415b8, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@564e18d4, edu.cmu.ml.rtw.users.jayantk.grounding.Domain@21403290]
[A, N]
[, /]
Predicate: abut-rel : [everything, everything]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
Predicate: kb-equal : [everything, everything]
[P, N]
[, /]
Predicate: kb-ignore : [everything]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Alabama : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Albany : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Allentown : [everything]
[N, N]
[, /]
[A, N]
[, /]
Predicate: along-rel : [everything, everything]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N, N]
[, /]
[P, P]
[, /]
[N]
[]
Predicate: kb-Altoona : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Anaheim : [everything]
[N, N]
[, /]
[A, A, A]
[, \, /]
[A, A, N]
[, \, /]
[A, N, A]
[, \, /]
[N, N, N]
[, \, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[S, A, N]
[, \, /]
[S, A, N]
[, /, /]
[S, N, A]
[, \, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, P, N]
[, \, /]
[S, P, N]
[, /, /]
[N]
[]
Predicate: kb-Arizona : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Arkansas : [everything]
[N, N]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[A, N]
[, /]
[A, N]
[, \]
[N]
[]
Predicate: kb-Atlanta : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Atlantic_Ocean : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Bakersfield : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: beach : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: bigger-rel : [everything, everything]
[N]
[]
Predicate: kb-Birmingham : [everything]
[N, N]
[, /]
[N]
[]
Predicate: body : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N, N]
[, \, /]
Predicate: border-rel : [everything, everything]
[N, N, P]
[, \, /]
[N, P]
[, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
Predicate: kb-ignore-equal : [everything, everything]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
[N, N]
[, /]
[N, N, N]
[, \, /]
[N, P]
[, /]
[N]
[]
[S, N]
[, /]
[N, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[N, P]
[, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[A, A, A]
[, \, /]
[A, A, N]
[, \, /]
[A, N, A]
[, \, /]
[N, N, N]
[, \, /]
[N]
[]
Predicate: kb-Buffalo : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Burlington : [everything]
[N, N]
[, /]
[A, A, A]
[, \, /]
[A, A, N]
[, \, /]
[A, N, A]
[, \, /]
[N, N, N]
[, \, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-California : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Canton : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
Predicate: capital-rel : [everything, everything]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Charleston : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Charlotte : [everything]
[N, N]
[, /]
[N]
[]
Predicate: city : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Cleveland_Browns_Stadium : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Cleveland : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: close-rel : [everything, everything]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Columbia_River : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Columbus : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Concord : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Connecticut : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
Predicate: contain-rel : [everything, everything]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
Predicate: kb-Daytona_Beach : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Death_Valley_National_Park : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Detroit : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: east-rel : [everything, everything]
[N]
[]
Predicate: kb-Elko : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Eugene : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Everglades_National_Park : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Fern_Ridge_Lake : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Flagstaff : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Florida : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
Predicate: forest : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Francis_Marion_National_Forest : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Fremont : [everything]
[N, N]
[, /]
[N]
[]
Predicate: fresh : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Fresno : [everything]
[N, N]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-George_Washington_National_Forest : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Georgia : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
Predicate: kb-Grand_Canyon_National_Park : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Grand_Rapids : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Grand_Staircase-Escalante_National_Monument : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Great_Basin_National_Park : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Great_Salt_Lake : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Great_Smoky_Mountains_National_Park : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Greensboro : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Greenville : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Harrisburg : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
Predicate: kb-Henderson : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Hilton_Head_Island : [everything]
[N, N]
[, /]
[N, N]
[, /]
[P, P]
[, /]
[N]
[]
Predicate: kb-Huntington_Beach : [everything]
[N, N]
[, /]
[A, N]
[, /]
Predicate: in-rel : [everything, everything]
[A, N]
[, \]
[N]
[]
Predicate: kb-Indiana : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Indianapolis : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[A, N]
[, /]
Predicate: inside-rel : [everything, everything]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: island : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[S, A, N]
[, \, /]
[S, A, N]
[, /, /]
[S, N, A]
[, \, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, P, N]
[, \, /]
[S, P, N]
[, /, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[P, P]
[, /]
[N]
[]
Predicate: kb-Kentucky : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Key_Largo : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Kingston : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Knoxville : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Lake_Erie : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Lake_Huron : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Lake_Michigan : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Lake_Moultrie : [everything]
[N, N]
[, /]
[N]
[]
Predicate: lake : [everything]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Lake_Ontario : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Lake_Superior : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Lake_Tahoe : [everything]
[N, N]
[, /]
[N]
[]
Predicate: large : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: largest : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Las_Vegas : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: located-rel : [everything, everything]
[N]
[]
Predicate: kb-London : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Long_Beach : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Los_Angeles : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Louisiana : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Louisville : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Macon : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Maine : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: major : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Manchester : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Mansfield : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Markham : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Massachusetts : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Memphis : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Miami : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Michigan : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Milwaukee : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Mississippi : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Monongahela_National_Forest : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Montgomery : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Montreal : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Morgantown : [everything]
[N, N]
[, /]
[N, N]
[, /]
[P, P]
[, /]
[N]
[]
Predicate: kb-Mount_Whitney : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Myrtle_Beach : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
Predicate: kb-Nashua : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Nashville : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[A, N]
[, /]
Predicate: near-rel : [everything, everything]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Nevada : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Newark : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-New_Hampshire : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-New_Haven : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-New_Jersey : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-New_York_City : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-New_York : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-North_Carolina : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
Predicate: northeast-rel : [everything, everything]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
Predicate: north-rel : [everything, everything]
[P, P]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
Predicate: northwest-rel : [everything, everything]
[P, P]
[, /]
[N, N]
[, /]
[P, P]
[, /]
[N, N]
[, /]
Predicate: ocean : [everything]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Ohio : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Oklahoma : [everything]
[N, N]
[, /]
[A, N]
[, /]
Predicate: on-rel : [everything, everything]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Ontario : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Oregon : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Oswego_Lake : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Oxnard : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Pacific_Ocean : [everything]
[N, N]
[, /]
[N, N]
[, /]
Predicate: park : [everything]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
[N]
[]
[N, P]
[, /]
[N, N]
[, /]
Predicate: peninsula : [everything]
[N]
[]
[N, P]
[, /]
[N]
[]
Predicate: kb-Pennsylvania : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Philadelphia : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Phoenix : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Pittsburgh : [everything]
[N, N]
[, /]
[N, N]
[, /]
Predicate: place : [everything]
[N]
[]
[N, P]
[, /]
[N]
[]
Predicate: kb-Portland : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Provo : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Raleigh : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Red_Bluff : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Redding : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Redondo_Beach : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Reno : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Rhode_Island : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Richmond : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Rochester : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Sacramento : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Salem : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Salt_Lake_City : [everything]
[N, N]
[, /]
[N, N]
[, /]
Predicate: salt : [everything]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-San_Diego : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-San_Francisco_Bay : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-San_Francisco : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-San_Jose : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Santa_Rosa : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Shenandoah_National_Park : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Sierra_Nevada_Mountains : [everything]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N]
[]
Predicate: kb-South_Bend : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-South_Carolina : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: southeast-rel : [everything, everything]
[N, P]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: south-rel : [everything, everything]
[N]
[]
[P, P]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
Predicate: southwest-rel : [everything, everything]
[N, P]
[, /]
[N]
[]
[N]
[]
[S, A, N]
[, \, /]
[S, A, N]
[, /, /]
[S, N, A]
[, \, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, P, N]
[, \, /]
[S, P, N]
[, /, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Staples_Center : [everything]
[N, N]
[, /]
[N, N]
[, /]
Predicate: state : [everything]
[N, P]
[, /]
[N]
[]
[N, N, N]
[, \, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-St._George : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Stockton : [everything]
[N, N]
[, /]
[N, N, N]
[, \, /]
Predicate: surround-rel : [everything, everything]
[N, N, P]
[, \, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Tallahassee : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Tennessee : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Texas : [everything]
[N, N]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
[N, N]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[N]
[]
[N, N]
[, /]
[P, P]
[, /]
[N]
[]
[N, N]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N]
[]
Predicate: kb-Toronto : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Trenton : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Truckee_River : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Tucson : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Twin_Peaks : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Tygart_Lake : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Utah_Lake : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Utah : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Utica : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Uwharrie_National_Forest : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Vermont : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Virginia_Beach : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Virginia : [everything]
[N, N]
[, /]
[N, N]
[, /]
Predicate: water : [everything]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
Predicate: west-rel : [everything, everything]
[N]
[]
[N]
[]
Predicate: kb-West_Virginia : [everything]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, N, N]
[, \, /]
[N, N, P]
[, \, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[S, N]
[, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, N]
[, \, /]
[S, N, N]
[, /, /]
[S, N, P]
[, \, /]
[S, N, P]
[, \, /]
[S, P, N]
[, /, /]
[S, P, N]
[, /, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, N]
[, /]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Willamette_River : [everything]
[N, N]
[, /]
[N]
[]
Predicate: kb-Wisconsin : [everything]
[N, N]
[, /]
[A, N]
[, /]
[A, N]
[, \]
[N, N, N]
[, \, /]
[N, N, N]
[, \, /]
[P, N]
[, /]
[P, N]
[, \]
[P, P]
[, /]
[P, P]
[, \]
[N, N]
[, /]
[N, P]
[, /]
[N]
[]
[N]
[]
Predicate: kb-Yosemite_National_Park : [everything]
[N, N]
[, /]
485 nonterminals in grammar
3 edge types in parser
Getting nonterminal combinations.
Nonterminal sparsity pattern: 44933
Creating terminal combinations.
Terminal sparsity pattern: 922
Inference algorithm: dualDecomposition
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: tn 242 training examples
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: fl 222 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: pa 219 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: nc 243 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: sc 233 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: ok 244 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: va 225 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: mi 241 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, national, parks, are, there]
(lambda $x (and (park $x)))
[what, lakes, are, there]
(lambda $x (and (lake $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, the, Monongahela, National, Forest, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Monongahela_National_Forest $y))))
[is, there, a, national, park, in, West, Virginia, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-West_Virginia $y))))
[is, Richmond, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (east-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, east, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (east-rel $x $y) (kb-West_Virginia $y))))
fold: ga 237 training examples
[is, Tallahassee, a, city, ?]
(lambda $x (and (city $x) (kb-Tallahassee $x)))
[is, Miami, a, city, ?]
(lambda $x (and (city $x) (kb-Miami $x)))
[is, Florida, a, state, ?]
(lambda $x (and (state $x) (kb-Florida $x)))
[is, Miami, a, state, ?]
(lambda $x (and (state $x) (kb-Miami $x)))
[is, Tallahassee, a, state, ?]
(lambda $x (and (state $x) (kb-Tallahassee $x)))
[is, Key, Largo, an, island, ?]
(lambda $x (and (island $x) (kb-Key_Largo $x)))
[is, Miami, an, island, ?]
(lambda $x (and (island $x) (kb-Miami $x)))
[is, Tallahassee, a, national, park, ?]
(lambda $x (and (park $x) (kb-Tallahassee $x)))
[is, Tallahassee, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Tallahassee $x) (in-rel $x $y) (kb-Florida $y))))
[is, Miami, a, city, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (kb-Miami $x) (in-rel $x $y) (kb-Florida $y))))
[which, island, is, in, Florida, ?]
(lambda $x (exists $y (and (island $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, national, park, is, to, the, south, west, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (southwest-rel $x $y) (kb-Miami $y))))
[what, national, park, is, to, the, north, west, of, Key, Largo, ?]
(lambda $x (exists $y (and (park $x) (northwest-rel $x $y) (kb-Key_Largo $y))))
[which, cities, are, to, the, north, of, Key, Largo, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Key_Largo $y))))
[which, city, is, to, the, south, east, of, Tallahassee, ?]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Tallahassee $y))))
[which, city, is, to, the, north, west, of, Daytona, Beach, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Daytona_Beach $y))))
[which, national, park, is, to, the, south, east, of, Tallahassee, and, north, west, of, Key, Largo, ?]
(lambda $x (exists $y $z (and (park $x) (southeast-rel $x $y) (kb-Tallahassee $y) (northwest-rel $x $z) (kb-Key_Largo $z))))
[which, city, is, to, the, north, of, Key, Largo, and, east, of, Tallahassee, ?]
(lambda $x (exists $y $z (and (city $x) (north-rel $x $y) (kb-Key_Largo $y) (east-rel $x $z) (kb-Tallahassee $z))))
[which, city, is, in, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, national, parks, are, in, Florida, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, city, is, there, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, cities, are, in, Florida, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, capital, of, Florida, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Florida $y))))
[what, are, some, Florida, cities, on, the, peninsula, ?]
NO LF
[what, are, some, Florida, cities, not, on, the, peninsula, ?]
NO LF
[what, state, has, Tallahassee, as, its, capital, ?]
(lambda $x (exists $y (and (state $x) (capital-rel $y $x) (kb-Tallahassee $y))))
[what, state, is, Miami, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Miami $y))))
[what, national, park, is, just, east, of, Miami, ?]
(lambda $x (exists $y (and (park $x) (east-rel $x $y) (kb-Miami $y))))
[what, are, some, beaches, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, beach, is, on, the, east, coast, of, Florida, , , north, of, Miami, ?]
NO LF
[what, island, chain, is, south, of, the, Everglades, National, Park, ?]
(lambda $x (exists $y (and (island $x) (south-rel $x $y) (kb-Everglades_National_Park $y))))
[what, major, city, is, located, in, northern, Florida, ?]
NO LF
[what, beaches, are, in, Florida, ?]
(lambda $x (exists $y (and (beach $x) (in-rel $x $y) (kb-Florida $y))))
[what, is, the, south, most, major, city, in, Florida, ?]
NO LF
[what, city, lies, between, Daytona, Beach, and, Key, Largo, ?]
NO LF
[what, state, is, Key, Largo, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Key_Largo $y))))
[what, Florida, national, park, is, at, the, southern, tip, of, the, peninsula, ?]
NO LF
[what, state, is, Daytona, Beach, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Daytona_Beach $y))))
[is, Key, Largo, an, island, ?]
(lambda $x (and (kb-Key_Largo $x) (island $x)))
[what, states, are, there, ?]
(lambda $x (and (state $x)))
[what, state, is, west, of, Georgia, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Georgia $y))))
[what, state, is, east, of, Alabama, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Alabama, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Alabama $y))))
[what, state, borders, Georgia, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Georgia $y))))
[what, cities, are, there, ?]
(lambda $x (and (city $x)))
[what, cities, are, in, Alabama, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Alabama $y))))
[what, cities, are, in, Georgia, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Georgia $y))))
[what, state, is, Atlanta, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Atlanta $y))))
[what, state, is, Macon, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Macon $y))))
[what, state, is, Montgomery, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Montgomery $y))))
[what, state, is, Birmingham, in, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Birmingham $y))))
[what, city, is, south, of, Birmingham, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Birmingham $y))))
[what, city, is, south, of, Atlanta, ?]
(lambda $x (exists $y (and (city $x) (south-rel $x $y) (kb-Atlanta $y))))
[what, city, is, north, of, Macon, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Macon $y))))
[what, city, is, north, of, Montgomery, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Montgomery $y))))
[what, is, the, southernmost, city, in, Alabama, ?]
NO LF
[what, is, the, southernmost, city, in, Georgia, ?]
NO LF
[what, is, the, farthest, city, from, Birmingham, ?]
NO LF
[what, is, the, farthest, city, from, Macon, ?]
NO LF
[what, is, the, closest, city, to, Birmingham, ?]
NO LF
[what, is, the, closest, city, to, Atlanta, ?]
NO LF
[what, cities, are, in, states, that, border, Alabama, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Alabama $z))))
[what, cities, are, in, states, that, border, Georgia, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (state $y) (border-rel $y $z) (kb-Georgia $z))))
[what, city, is, north, of, Montgomery, in, the, state, bordering, Georgia, ?]
(lambda $x (exists $w $y $z (and (city $x) (north-rel $x $y) (kb-Montgomery $y) (in-rel $x $w) (state $w) (border-rel $w $z) (kb-Georgia $z))))
[which, of, these, are, lakes, ?]
(lambda $x (and (lake $x)))
[name, the, cities]
(lambda $x (and (city $x)))
[name, the, states]
(lambda $x (and (state $x)))
[what, cities, are, in, Michigan]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Michigan]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Michigan $y))))
[what, lakes, are, near, Wisconsin]
(lambda $x (exists $y (and (lake $x) (near-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, west, of, Michigan]
(lambda $x (exists $y (and (lake $x) (west-rel $x $y) (kb-Michigan $y))))
[what, states, border, west, of, Michigan, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (border-rel $x $y) (kb-Michigan $y))))
[what, state, is, east, of, Wisconsin]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Wisconsin $y))))
[what, cities, are, on, Lake, Michigan]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, is, the, largest, city, in, Michigan, ?]
NO LF
[what, is, the, second, largest, city, in, Michigan, ?]
NO LF
[what, is, the, largest, city, in, Wisconsin, ?]
NO LF
[name, the, lakes, bordering, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Michigan $y))))
[what, city, is, east, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (east-rel $x $y) (kb-Grand_Rapids $y))))
[what, city, is, west, of, Detroit, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Detroit $y))))
[what, city, is, west, of, Grand, Rapids, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Grand_Rapids $y))))
[what, lake, borders, Wisconsin, ?]
(lambda $x (exists $y (and (lake $x) (border-rel $x $y) (kb-Wisconsin $y))))
[what, lake, is, east, of, Lake, Michigan, ?]
(lambda $x (exists $y (and (lake $x) (east-rel $x $y) (kb-Lake_Michigan $y))))
[what, states, are, on, Lake, Michigan]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Lake_Michigan $y))))
[what, borders, Michigan, ?]
(lambda $x (exists $y (and (border-rel $x $y) (kb-Michigan $y))))
[which, city, is, closest, to, the, ocean, ?]
NO LF
[what, is, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[which, state, is, further, north, ?]
NO LF
[which, state, is, larger, ?]
NO LF
[which, are, cities, ?]
(lambda $x (and (city $x)))
[which, forest, is, in, North, Carolina, ?]
(lambda $x (exists $y (and (forest $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, is, the, northernmost, city, in, North, Carolina, ?]
NO LF
[what, cities, are, in, North, Carolina, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, east, of, Greensboro, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (east-rel $x $y) (kb-Greensboro $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, city, is, north, east, of, Charlotte, in, North, Carolina, ?]
(lambda $x (exists $y $z (and (city $x) (northeast-rel $x $y) (kb-Charlotte $y) (in-rel $x $z) (kb-North_Carolina $z))))
[what, state, is, south, of, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, west, of, Raleigh, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Raleigh $y))))
[is, Myrtle, Beach, near, North, Carolina, ?]
(lambda $x (exists $y (and (kb-Myrtle_Beach $x) (near-rel $x $y) (kb-North_Carolina $y))))
[what, cities, are, on, the, ocean, ?]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, North, Carolina, city, is, near, South, Carolina, ?]
(lambda $x (exists $y $z (and (kb-North_Carolina $z) (in-rel $x $z) (city $x) (near-rel $x $y) (kb-South_Carolina $y))))
[what, forest, is, close, to, Charlotte, ?]
(lambda $x (exists $y (and (forest $x) (close-rel $x $y) (kb-Charlotte $y))))
[what, is, south, of, Greensboro, ?]
(lambda $x (exists $y (and (south-rel $x $y) (kb-Greensboro $y))))
[what, is, north, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (north-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[what, is, north, east, of, Uwharrie, National, Forest, ?]
(lambda $x (exists $y (and (northeast-rel $x $y) (kb-Uwharrie_National_Forest $y))))
[which, states, border, Texas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Texas $y))))
[which, states, border, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Louisiana $y))))
[which, states, border, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Arkansas $y))))
[which, state, is, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, east, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Louisiana $y))))
[which, state, is, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Arkansas $y))))
[which, state, is, south, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, north, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-Texas $y))))
[which, state, is, north, west, of, Louisiana, ?]
(lambda $x (exists $y (and (state $x) (northwest-rel $x $y) (kb-Louisiana $y))))
[which, state, is, north, east, of, Texas, ?]
(lambda $x (exists $y (and (state $x) (northeast-rel $x $y) (kb-Texas $y))))
[which, state, is, south, east, of, Oklahoma, ?]
(lambda $x (exists $y (and (state $x) (southeast-rel $x $y) (kb-Oklahoma $y))))
[which, state, is, south, west, of, Arkansas, ?]
(lambda $x (exists $y (and (state $x) (southwest-rel $x $y) (kb-Arkansas $y))))
[which, states, are, between, Texas, and, Mississippi, ?]
NO LF
[which, states, border, both, Texas, and, Arkansas, ?]
NO LF
[which, states, border, both, Louisiana, and, Arkansas, ?]
NO LF
[what, cities, are, there]
(lambda $x (and (city $x)))
[what, states, are, there]
(lambda $x (and (state $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, is, the, city, of, Pittsburgh]
(lambda $x (and (city $x) (kb-Pittsburgh $x)))
[which, is, the, city, of, Harrisburg]
(lambda $x (and (city $x) (kb-Harrisburg $x)))
[which, cities, are, in, New, Jersey]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-New_Jersey $y))))
[which, of, these, are, in, Pennsylvania]
(lambda $x (exists $y (and (in-rel $x $y) (kb-Pennsylvania $y))))
[which, city, is, in, Pennsylvania]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y))))
[is, Pittsburgh, west, of, Harrisburg]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[which, city, is, west, of, Harrisburg]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Harrisburg $y))))
[what, cities, are, west, of, Newark]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Newark $y))))
[what, cities, are, west, of, Trenton]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Trenton $y))))
[is, Newark, east, of, Harrisburg]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Harrisburg $y))))
[is, Newark, east, of, Pittsburgh]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pennsylvania]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, state, is, east, of, Pennsylvania]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, Pennsylvania]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Pennsylvania $y))))
[what, is, the, capital, of, New, Jersey]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-New_Jersey $y))))
[what, city, is, in, Pennsylvania, and, west, of, Harrisburg]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (west-rel $x $z) (kb-Harrisburg $z))))
[what, city, is, in, Pennsylvania, but, east, of, Pittsburgh]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Pennsylvania $y) (east-rel $x $z) (kb-Pittsburgh $z))))
[is, Pittsburgh, a, city, ?]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[is, Newark, a, city, ?]
(lambda $x (and (kb-Newark $x) (city $x)))
[is, Pennsylvania, a, city, ?]
(lambda $x (and (kb-Pennsylvania $x) (city $x)))
[is, Pennsylvania, a, state, ?]
(lambda $x (and (kb-Pennsylvania $x) (state $x)))
[is, Pittsburgh, a, state, ?]
(lambda $x (and (kb-Pittsburgh $x) (state $x)))
[is, Newark, a, state, ?]
(lambda $x (and (kb-Newark $x) (state $x)))
[Newark, is, a, city, .]
(lambda $x (and (kb-Newark $x) (city $x)))
[Pittsburgh, is, a, city, .]
(lambda $x (and (kb-Pittsburgh $x) (city $x)))
[Harrisburg, is, a, city, .]
(lambda $x (and (kb-Harrisburg $x) (city $x)))
[Newark, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Newark, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Newark $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, Newark, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-Newark $y))))
[is, New, Jersey, a, state, ?]
(lambda $x (and (kb-New_Jersey $x) (state $x)))
[New, Jersey, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, New, Jersey, east, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-New_Jersey $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Pittsburgh, east, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (east-rel $x $y) (kb-New_Jersey $y))))
[Pittsburgh, is, not, east, of, New, Jersey, .]
NO LF
[Pittsburgh, is, west, of, New, Jersey, .]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, New, Jersey, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-New_Jersey $y))))
[is, Pittsburgh, west, of, Harrisburg, ?]
(lambda $x (exists $y (and (kb-Pittsburgh $x) (west-rel $x $y) (kb-Harrisburg $y))))
[Harrisburg, is, east, of, Pittsburgh, .]
(lambda $x (exists $y (and (kb-Harrisburg $x) (east-rel $x $y) (kb-Pittsburgh $y))))
[is, Harrisburg, west, of, Pittsburgh, ?]
(lambda $x (exists $y (and (kb-Harrisburg $x) (west-rel $x $y) (kb-Pittsburgh $y))))
[which, are, cities, ?]
(lambda $x (and (city $x)))
[what, lakes, are, there, ?]
(lambda $x (and (lake $x)))
[what, beaches, are, there, ?]
(lambda $x (and (beach $x)))
[what, bodies, of, water, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (body $x) (water $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, oceans, are, there, ?]
(lambda $x (and (ocean $x)))
[which, are, forests, ?]
(lambda $x (and (forest $x)))
[which, are, national, parks, ?]
(lambda $x (and (park $x)))
[what, ocean, borders, South, Carolina, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-South_Carolina $y))))
[which, are, in, South, Carolina, ?]
(lambda $x (exists $y (and (in-rel $x $y) (kb-South_Carolina $y))))
[which, are, surrounded, by, water, ?]
(lambda $x (exists $y (and (surround-rel $x $y) (water $y))))
[which, are, bodies, of, salt, water, ?]
(lambda $x (and (body $x) (salt $x) (water $x)))
[which, are, bodies, of, fresh, water, ?]
(lambda $x (and (body $x) (fresh $x) (water $x)))
[which, places, are, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (place $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, north, of, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (north-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, South, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-South_Carolina $y))))
[what, state, borders, North, Carolina, ?]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-North_Carolina $y))))
[what, city, is, northeast, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northeast-rel $x $y) (kb-Charleston $y))))
[what, city, is, northwest, of, Charleston, ?]
(lambda $x (exists $y (and (city $x) (northwest-rel $x $y) (kb-Charleston $y))))
[what, major, city, is, southeast, of, Greenville, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southeast-rel $x $y) (kb-Greenville $y))))
[what, major, city, is, southwest, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (major $x) (city $x) (southwest-rel $x $y) (kb-Myrtle_Beach $y))))
[what, island, is, southwest, of, Charleston, ?]
(lambda $x (exists $y (and (island $x) (southwest-rel $x $y) (kb-Charleston $y))))
[what, states, are, on, the, ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (ocean $y))))
[what, city, is, north, of, Myrtle, Beach, ?]
(lambda $x (exists $y (and (city $x) (north-rel $x $y) (kb-Myrtle_Beach $y))))
[what, 's, the, capital, of, North, Carolina, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-North_Carolina $y))))
[what, island, is, near, Charleston, ?]
(lambda $x (exists $y (and (island $x) (near-rel $x $y) (kb-Charleston $y))))
[what, beach, city, is, northeast, of, Charleston, , , near, North, Carolina, ?]
(lambda $x (exists $y $z (and (beach $x) (city $x) (northeast-rel $x $y) (kb-Charleston $y) (near-rel $x $z) (kb-North_Carolina $z))))
[what, 's, near, Charleston, ?]
(lambda $x (exists $y (and (near-rel $x $y) (kb-Charleston $y))))
[what, lake, is, close, to, Francis, Marion, National, Forest, ?]
(lambda $x (exists $y (and (lake $x) (close-rel $x $y) (kb-Francis_Marion_National_Forest $y))))
[is, Hilton, Head, Island, in, South, Carolina, ?]
(lambda $x (exists $y (and (kb-Hilton_Head_Island $x) (in-rel $x $y) (kb-South_Carolina $y))))
[what, cities, are, in, Tennessee, ?]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, are, the, states, ?]
(lambda $x (and (state $x)))
[what, are, the, national, parks, ?]
(lambda $x (and (park $x)))
[in, which, state, is, Knoxville, ?]
(lambda $x (exists $y (and (state $x) (in-rel $y $x) (kb-Knoxville $y))))
[what, city, is, located, in, eastern, Tennessee, ?]
NO LF
[what, city, is, located, in, western, Tennessee, ?]
NO LF
[what, city, is, located, in, central, Tennessee, ?]
NO LF
[what, cities, are, west, of, Nashville, ?]
(lambda $x (exists $y (and (city $x) (west-rel $x $y) (kb-Nashville $y))))
[what, national, parks, are, near, Knoxville, ?]
(lambda $x (exists $y (and (park $x) (near-rel $x $y) (kb-Knoxville $y))))
[what, state, is, south, of, Tennessee, ?]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Tennessee $y))))
[what, city, is, in, Tennessee, and, east, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Nashville $z))))
[what, city, is, in, Tennessee, and, west, of, Nashville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Nashville $z))))
[what, national, parks, are, in, Tennessee, ?]
(lambda $x (exists $y (and (park $x) (in-rel $x $y) (kb-Tennessee $y))))
[what, major, city, in, Tennessee, is, closest, to, Alabama, ?]
NO LF
[is, Tennessee, bigger, than, Alabama, ?]
(lambda $x (exists $y (and (kb-Tennessee $x) (bigger-rel $x $y) (kb-Alabama $y))))
[does, Alabama, border, Tennessee, ?]
(lambda $x (exists $y (and (kb-Alabama $x) (border-rel $x $y) (kb-Tennessee $y))))
[what, cities, are, in, Tennessee, , , but, west, of, Knoxville, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (west-rel $x $z) (kb-Knoxville $z))))
[what, cities, are, in, Tennessee, , , but, east, of, Memphis, ?]
(lambda $x (exists $y $z (and (city $x) (in-rel $x $y) (kb-Tennessee $y) (east-rel $x $z) (kb-Memphis $z))))
[what, major, cities, and, national, parks, are, east, of, Nashville, ?]
NO LF
[what, city, is, in, Tennessee, , , but, between, Knoxville, and, Memphis, ?]
NO LF
[what, states, are, there]
(lambda $x (and (state $x)))
[what, 's, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, city, is, on, the, ocean]
(lambda $x (exists $y (and (city $x) (on-rel $x $y) (ocean $y))))
[what, oceans, are, there]
(lambda $x (and (ocean $x)))
[what, is, the, capital, of, Virginia]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, is, the, closest, large, city, to, Virginia, Beach]
NO LF
[does, West, Virginia, abut, the, Atlantic, Ocean]
(lambda $x (exists $y (and (kb-West_Virginia $x) (abut-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, is, south, of, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (east-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, in, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-Virginia $y))))
[what, cities, in, West, Virginia]
(lambda $x (exists $y (and (city $x) (in-rel $x $y) (kb-West_Virginia $y))))
[what, city, is, the, northernmost, in, Virginia]
NO LF
[what, is, the, southernmost, city, in, West, Virginia]
NO LF
[what, states, have, borders, on, the, Atlantic, Ocean]
(lambda $x (exists $y (and (state $x) (border-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, along, the, Atlantic, Ocean]
(lambda $x (exists $y (and (city $x) (along-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, state, is, west, of, Virginia]
(lambda $x (exists $y (and (state $x) (west-rel $x $y) (kb-Virginia $y))))
[what, state, is, south, of, West, Virginia]
(lambda $x (exists $y (and (state $x) (south-rel $x $y) (kb-West_Virginia $y))))
[what, cities, are, near, Richmond]
(lambda $x (exists $y (and (city $x) (near-rel $x $y) (kb-Richmond $y))))
[what, city, is, south, east, of, Richmond]
(lambda $x (exists $y (and (city $x) (southeast-rel $x $y) (kb-Richmond $y))))
[what, states, have, a, coast, on, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (state $x) (on-rel $x $y) (kb-Atlantic_Ocean $y))))
[what, state, contains, Virginia, Beach, ?]
(lambda $x (exists $y (and (state $x) (contain-rel $x $y) (kb-Virginia_Beach $y))))
[what, ocean, borders, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-Virginia $y))))
[what, ocean, borders, West, Virginia, ?]
(lambda $x (exists $y (and (ocean $x) (border-rel $x $y) (kb-West_Virginia $y))))
[what, is, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (capital-rel $x $y) (kb-Virginia $y))))
[what, state, is, east, of, West, Virginia, , , and, shares, a, common, word, in, its, name, ?]
NO LF
[what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
NO LF
NO PARSE OF: [what, state, west, of, Virginia, also, has, Virginia, in, its, name, ?]
[is, Richmond, the, capital, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[is, Virginia, Beach, inside, of, West, Virginia, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (inside-rel $x $y) (kb-West_Virginia $y))))
[what, states, have, Virginia, in, their, name, ?]
NO LF
[is, Richmond, the, capital, of, Virginia, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (capital-rel $x $y) (kb-Virginia $y))))
[is, Virginia, Beach, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Virginia_Beach $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-Virginia $x))))
[is, Richmond, in, the, Atlantic, Ocean, ?]
(lambda $x (exists $y (and (kb-Richmond $x) (in-rel $x $y) (kb-Atlantic_Ocean $y))))
[is, the, Atlantic, Ocean, in, West, Virginia, ?]
(lambda $y (exists $x (and (kb-Atlantic_Ocean $y) (in-rel $y $x) (kb-West_Virginia $x))))
[is, the, Atlantic, Ocean, between, Virginia, and, West, Virginia, ?]
NO LF
fold: wv 252 training examples
*** ITERATION 0 ***
[[is, Tallahassee, a, city, ?]]
[[is, Florida, a, state, ?]]
[[is, Miami, a, city, ?]]
[[is, Miami, a, state, ?]]
Num offered: 2
Num offered: 2
2 word combinations
Num offered: 2
2 word combinations
Num offered: 2
inference: [is, Florida, a, state, ?] kb-equal:2(0:kb-Florida:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
inference: [is, Tallahassee, a, city, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:city:1(0:<empty>)[0])[]
2 word combinations
2 word combinations
inference: [is, Miami, a, state, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
inference: [is, Miami, a, city, ?] kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:city:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
4 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 53 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1 iterations, 0 disagreements
inference: [is, Miami, a, state, ?] kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1000 iterations, 48 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1000 iterations, 48 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
4 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 50 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 52 disagreements
inference: [is, Miami, a, city, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:city:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 53 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 54 disagreements
1 iterations, 0 disagreements
inference: [is, Florida, a, state, ?] kb-equal:2(0:kb-Florida:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
predicted input: [is, Miami, a, state, ?]
predicted parse: kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
true input: [is, Miami, a, state, ?]
true parse: kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {[Atlanta] [Florida] [Key Largo] [Miami] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {}[DenseTensor ]
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
10 iterations, 0 disagreements
1 iterations, 0 disagreements
[[is, Tallahassee, a, state, ?]]
Num offered: 2
2 word combinations
inference: [is, Tallahassee, a, state, ?] kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
8 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 48 disagreements
inference: [is, Tallahassee, a, city, ?] kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:city:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 47 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 48 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1000 iterations, 50 disagreements
4 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
inference: [is, Tallahassee, a, state, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 48 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 48 disagreements
predicted input: [is, Miami, a, city, ?]
predicted parse: kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:city:1(0:<empty>)[0])[])[]
true input: [is, Miami, a, city, ?]
true parse: kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:city:1(0:<empty>)[0])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
city:1: {[Daytona Beach] [Georgia] [Key Largo] [Tallahassee] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
city:1: {[Atlanta] [Everglades National Park] [Miami] }[DenseTensor ]
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
[[is, Key, Largo, an, island, ?]]
Num offered: 2
2 word combinations
inference: [is, Key, Largo, an, island, ?] kb-equal:2(0:kb-Key_Largo:1(0:kb-ignore:1(0:<empty>)[0])[],1:island:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 38 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1 iterations, 0 disagreements
predicted input: [is, Tallahassee, a, state, ?]
predicted parse: kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
true input: [is, Tallahassee, a, state, ?]
true parse: kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {[Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {}[DenseTensor ]
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
[[is, Miami, an, island, ?]]
Num offered: 2
2 word combinations
inference: [is, Miami, an, island, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:island:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 47 disagreements
predicted input: [is, Florida, a, state, ?]
predicted parse: kb-equal:2(0:kb-Florida:1(0:<empty>)[0],1:kb-ignore:1(0:state:1(0:<empty>)[0])[])[]
true input: [is, Florida, a, state, ?]
true parse: kb-equal:2(0:kb-Florida:1(0:kb-ignore:1(0:<empty>)[0])[],1:state:1(0:<empty>)[0])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Florida:1: {[Florida] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=-500.0, [3, 1]=500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Key Largo] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Florida:1: {[Florida] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=-500.0, [3, 1]=500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
state:1: {[Atlanta] [Everglades National Park] [Florida] [Miami] [Tallahassee] }[DenseTensor ]
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
state:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
[[is, Tallahassee, a, national, park, ?]]
Num offered: 5
5 word combinations
inference: [is, Tallahassee, a, national, park, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-ignore:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
11 iterations, 0 disagreements
1000 iterations, 60 disagreements
predicted input: [is, Tallahassee, a, city, ?]
predicted parse: kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:city:1(0:<empty>)[0])[]
true input: [is, Tallahassee, a, city, ?]
true parse: kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:city:1(0:<empty>)[0])[])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
city:1: {[Atlanta] [Miami] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
city:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Georgia] [Miami] [Tallahassee] }[DenseTensor ]
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
city:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
224 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
11 iterations, 0 disagreements
1000 iterations, 42 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 53 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1 iterations, 0 disagreements
inference: [is, Miami, an, island, ?] kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:island:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 4 disagreements
inference: [is, Tallahassee, a, national, park, ?] kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:kb-ignore:1(0:park:1(0:<empty>)[0])[])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 55 disagreements
inference: [is, Key, Largo, an, island, ?] kb-equal:2(0:kb-Key_Largo:1(0:<empty>)[0],1:kb-ignore:1(0:island:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 53 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1 iterations, 0 disagreements
predicted input: [is, Miami, an, island, ?]
predicted parse: kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:island:1(0:<empty>)[0])[]
true input: [is, Miami, an, island, ?]
true parse: kb-equal:2(0:kb-Miami:1(0:<empty>)[0],1:kb-ignore:1(0:island:1(0:<empty>)[0])[])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {[Atlanta] [Florida] [Key Largo] [Miami] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Miami:1: {[Miami] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=-500.0, [6, 1]=500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {}[DenseTensor ]
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
1000 iterations, 54 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1 iterations, 0 disagreements
inference: [is, Tallahassee, a, national, park, ?] kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:kb-ignore:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
160 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1000 iterations, 55 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 2 disagreements
inference: [is, Tallahassee, a, national, park, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-ignore:1(0:park:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 59 disagreements
predicted input: [is, Key, Largo, an, island, ?]
predicted parse: kb-equal:2(0:kb-Key_Largo:1(0:kb-ignore:1(0:<empty>)[0])[],1:island:1(0:<empty>)[0])[]
true input: [is, Key, Largo, an, island, ?]
true parse: kb-equal:2(0:kb-Key_Largo:1(0:<empty>)[0],1:kb-ignore:1(0:island:1(0:<empty>)[0])[])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Key_Largo:1: {[Key Largo] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=-500.0, [5, 1]=500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {[Florida] [Georgia] [Miami] }[DenseTensor ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Key_Largo:1: {[Key Largo] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=-500.0, [5, 1]=500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Georgia] [Key Largo] [Tallahassee] }[DenseTensor ]
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
1000 iterations, 44 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
8 iterations, 0 disagreements
1 iterations, 0 disagreements
inference: [is, Tallahassee, a, national, park, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:kb-ignore:1(0:<empty>)[0])[])[],1:park:1(0:<empty>)[0])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
6 iterations, 0 disagreements
14 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1000 iterations, 38 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
6 iterations, 0 disagreements
14 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
1 iterations, 0 disagreements
predicted input: [is, Tallahassee, a, national, park, ?]
predicted parse: kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-ignore:1(0:<empty>)[0])[]
true input: [is, Tallahassee, a, national, park, ?]
true parse: kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:kb-ignore:1(0:<empty>)[0])[])[],1:park:1(0:<empty>)[0])[]
parse weights: 0.0 0.0
grounding weight deltas: 1.0 0.0
weights: 1.0 0.0
1.0 0.0
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-Tallahassee:1: {[Tallahassee] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=500.0, [3, 1]=-500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=-500.0, [7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
park:1: {}[DenseTensor ]
park:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
park:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
0: search errors=0.0
0: gradient l2 norm=4.697208241496788
0: step size=0.7071067811865475
0: objective value=-1.0
0: objective value (moving avg.)=-1.0
0: gradient l2 norm (moving avg.)=5.597208241496788
0 done. Elapsed: 18411.0 ms
Elapsed time statistics:
compute_gradient_(serial): 17.920 sec (17920.000 ms * 1)
compute_statistics: 0.006 sec (6.000 ms * 1)
instantiate_model: 0.000 sec (0.000 ms * 1)
iteration: 18.411 sec (18411.000 ms * 1)
mr_gradient_initialize: 0.034 sec (3.778 ms * 9)
mr_gradient_map: 47.827 sec (5978.375 ms * 8)
parameter_update: 0.484 sec (484.000 ms * 1)
serialize_parameters: 0.000 sec (0.000 ms * 1)
*** ITERATION 1 ***
[[is, Tallahassee, a, city, in, Florida, ?]]
Num offered: 10
10 word combinations
inference: [is, Tallahassee, a, city, in, Florida, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-equal:2(0:city:1(0:<empty>)[0],1:kb-Florida:1(0:<empty>)[0])[])[]
[[which, island, is, in, Florida, ?]]
[[is, Miami, a, city, in, Florida, ?]]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
Num offered: 10
10 word combinations
inference: [is, Miami, a, city, in, Florida, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-equal:2(0:city:1(0:<empty>)[0],1:kb-Florida:1(0:<empty>)[0])[])[]
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
[[what, national, park, is, in, Florida, ?]]
Num offered: 2
2 word combinations
inference: [which, island, is, in, Florida, ?] kb-equal:2(0:kb-ignore:1(0:island:1(0:<empty>)[0])[],1:kb-ignore:1(0:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
Num offered: 4
4 word combinations
inference: [what, national, park, is, in, Florida, ?] kb-equal:2(0:kb-ignore:1(0:kb-ignore:1(0:<empty>)[0])[],1:in-rel:2(0:<empty>,1:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
34 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
79 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
11 iterations, 0 disagreements
34 iterations, 0 disagreements
1 iterations, 0 disagreements
14 iterations, 0 disagreements
11 iterations, 0 disagreements
14 iterations, 0 disagreements
8 iterations, 0 disagreements
27 iterations, 0 disagreements
27 iterations, 0 disagreements
411 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
154 iterations, 0 disagreements
198 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
79 iterations, 0 disagreements
208 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
34 iterations, 0 disagreements
1 iterations, 0 disagreements
11 iterations, 0 disagreements
14 iterations, 0 disagreements
411 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
27 iterations, 0 disagreements
207 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
34 iterations, 0 disagreements
1 iterations, 0 disagreements
11 iterations, 0 disagreements
14 iterations, 0 disagreements
27 iterations, 0 disagreements
154 iterations, 0 disagreements
1000 iterations, 13 disagreements
inference: [which, island, is, in, Florida, ?] kb-equal:2(0:kb-ignore:1(0:island:1(0:<empty>)[0])[],1:in-rel:2(0:<empty>,1:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
79 iterations, 0 disagreements
1000 iterations, 53 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
8 iterations, 0 disagreements
411 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
154 iterations, 0 disagreements
1000 iterations, 21 disagreements
inference: [is, Tallahassee, a, city, in, Florida, ?] kb-equal:2(0:kb-Tallahassee:1(0:kb-ignore:1(0:city:1(0:<empty>)[0])[])[],1:kb-ignore:1(0:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
5 iterations, 0 disagreements
9 iterations, 0 disagreements
43 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
16 iterations, 0 disagreements
1000 iterations, 27 disagreements
inference: [is, Miami, a, city, in, Florida, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-equal:2(0:<empty>,1:kb-ignore:1(0:kb-Florida:1(0:<empty>)[0])[])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
11 iterations, 0 disagreements
17 iterations, 0 disagreements
193 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
5 iterations, 0 disagreements
9 iterations, 0 disagreements
43 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
16 iterations, 0 disagreements
211 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
11 iterations, 0 disagreements
17 iterations, 0 disagreements
1000 iterations, 28 disagreements
inference: [what, national, park, is, in, Florida, ?] kb-equal:2(0:kb-ignore:1(0:kb-ignore:1(0:<empty>)[0])[],1:kb-ignore:1(0:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
12 iterations, 0 disagreements
197 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
10 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
12 iterations, 0 disagreements
1000 iterations, 14 disagreements
inference: [is, Tallahassee, a, city, in, Florida, ?] kb-equal:2(0:kb-Tallahassee:1(0:<empty>)[0],1:kb-ignore:1(0:in-rel:2(0:city:1(0:<empty>)[0],1:kb-Florida:1(0:<empty>)[0])[])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
27 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 112 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
79 iterations, 0 disagreements
411 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
154 iterations, 0 disagreements
1000 iterations, 20 disagreements
inference: [is, Miami, a, city, in, Florida, ?] kb-equal:2(0:kb-Miami:1(0:kb-ignore:1(0:city:1(0:<empty>)[0])[])[],1:in-rel:2(0:<empty>,1:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
5 iterations, 0 disagreements
7 iterations, 0 disagreements
18 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
15 iterations, 0 disagreements
1000 iterations, 4 disagreements
inference: [what, national, park, is, in, Florida, ?] kb-equal:2(0:kb-ignore:1(0:kb-ignore:1(0:park:1(0:<empty>)[0])[])[],1:in-rel:2(0:<empty>,1:kb-Florida:1(0:<empty>)[0])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1000 iterations, 151 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
27 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
4 iterations, 0 disagreements
1000 iterations, 102 disagreements
predicted input: [which, island, is, in, Florida, ?]
predicted parse: kb-equal:2(0:kb-ignore:1(0:island:1(0:<empty>)[0])[],1:in-rel:2(0:<empty>,1:kb-Florida:1(0:<empty>)[0])[])[]
true input: [which, island, is, in, Florida, ?]
true parse: kb-equal:2(0:kb-ignore:1(0:island:1(0:<empty>)[0])[],1:kb-ignore:1(0:kb-Florida:1(0:<empty>)[0])[])[]
parse weights: 0.08838834764831845 0.08838834764831845
grounding weight deltas: 4.0 0.0
weights: 4.088388347648318 0.08838834764831845
4.088388347648318 0.08838834764831845
predicted grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {[Daytona Beach] [Everglades National Park] [Tallahassee] }[DenseTensor [0, 1]=-1.4668181989905504, [1, 1]=0.6487994253198823, [2, 1]=0.8953347000564058, [3, 1]=-9.283015702623675, [4, 1]=-3.2289272006559995, [5, 1]=-0.6216865387719952, [6, 1]=-3.2186865153633506, [7, 1]=0.17380859006296173, ]
in-rel:2: {[Atlanta, Atlanta] [Atlanta, Daytona Beach] [Atlanta, Florida] [Atlanta, Miami] [Atlanta, Tallahassee] [Daytona Beach, Atlanta] [Daytona Beach, Everglades National Park] [Daytona Beach, Florida] [Daytona Beach, Georgia] [Daytona Beach, Miami] [Daytona Beach, Tallahassee] [Everglades National Park, Daytona Beach] [Everglades National Park, Florida] [Everglades National Park, Tallahassee] [Florida, Atlanta] [Florida, Florida] [Florida, Georgia] [Florida, Key Largo] [Georgia, Everglades National Park] [Georgia, Florida] [Georgia, Georgia] [Georgia, Key Largo] [Georgia, Tallahassee] [Key Largo, Atlanta] [Key Largo, Everglades National Park] [Key Largo, Georgia] [Key Largo, Key Largo] [Key Largo, Miami] [Miami, Daytona Beach] [Miami, Georgia] [Tallahassee, Atlanta] [Tallahassee, Florida] [Tallahassee, Miami] }[DenseTensor ]
kb-Florida:1: {[Florida] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=-500.0, [3, 1]=500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
true grounding: kb-equal:2: {[Atlanta, Atlanta] [Daytona Beach, Daytona Beach] [Everglades National Park, Everglades National Park] [Florida, Florida] [Georgia, Georgia] [Key Largo, Key Largo] [Miami, Miami] [Tallahassee, Tallahassee] }[DenseTensor [0, 0, 0]=-500.0, [0, 0, 1]=500.0, [0, 1, 0]=500.0, [0, 1, 1]=-500.0, [0, 2, 0]=500.0, [0, 2, 1]=-500.0, [0, 3, 0]=500.0, [0, 3, 1]=-500.0, [0, 4, 0]=500.0, [0, 4, 1]=-500.0, [0, 5, 0]=500.0, [0, 5, 1]=-500.0, [0, 6, 0]=500.0, [0, 6, 1]=-500.0, [0, 7, 0]=500.0, [0, 7, 1]=-500.0, [1, 0, 0]=500.0, [1, 0, 1]=-500.0, [1, 1, 0]=-500.0, [1, 1, 1]=500.0, [1, 2, 0]=500.0, [1, 2, 1]=-500.0, [1, 3, 0]=500.0, [1, 3, 1]=-500.0, [1, 4, 0]=500.0, [1, 4, 1]=-500.0, [1, 5, 0]=500.0, [1, 5, 1]=-500.0, [1, 6, 0]=500.0, [1, 6, 1]=-500.0, [1, 7, 0]=500.0, [1, 7, 1]=-500.0, [2, 0, 0]=500.0, [2, 0, 1]=-500.0, [2, 1, 0]=500.0, [2, 1, 1]=-500.0, [2, 2, 0]=-500.0, [2, 2, 1]=500.0, [2, 3, 0]=500.0, [2, 3, 1]=-500.0, [2, 4, 0]=500.0, [2, 4, 1]=-500.0, [2, 5, 0]=500.0, [2, 5, 1]=-500.0, [2, 6, 0]=500.0, [2, 6, 1]=-500.0, [2, 7, 0]=500.0, [2, 7, 1]=-500.0, [3, 0, 0]=500.0, [3, 0, 1]=-500.0, [3, 1, 0]=500.0, [3, 1, 1]=-500.0, [3, 2, 0]=500.0, [3, 2, 1]=-500.0, [3, 3, 0]=-500.0, [3, 3, 1]=500.0, [3, 4, 0]=500.0, [3, 4, 1]=-500.0, [3, 5, 0]=500.0, [3, 5, 1]=-500.0, [3, 6, 0]=500.0, [3, 6, 1]=-500.0, [3, 7, 0]=500.0, [3, 7, 1]=-500.0, [4, 0, 0]=500.0, [4, 0, 1]=-500.0, [4, 1, 0]=500.0, [4, 1, 1]=-500.0, [4, 2, 0]=500.0, [4, 2, 1]=-500.0, [4, 3, 0]=500.0, [4, 3, 1]=-500.0, [4, 4, 0]=-500.0, [4, 4, 1]=500.0, [4, 5, 0]=500.0, [4, 5, 1]=-500.0, [4, 6, 0]=500.0, [4, 6, 1]=-500.0, [4, 7, 0]=500.0, [4, 7, 1]=-500.0, [5, 0, 0]=500.0, [5, 0, 1]=-500.0, [5, 1, 0]=500.0, [5, 1, 1]=-500.0, [5, 2, 0]=500.0, [5, 2, 1]=-500.0, [5, 3, 0]=500.0, [5, 3, 1]=-500.0, [5, 4, 0]=500.0, [5, 4, 1]=-500.0, [5, 5, 0]=-500.0, [5, 5, 1]=500.0, [5, 6, 0]=500.0, [5, 6, 1]=-500.0, [5, 7, 0]=500.0, [5, 7, 1]=-500.0, [6, 0, 0]=500.0, [6, 0, 1]=-500.0, [6, 1, 0]=500.0, [6, 1, 1]=-500.0, [6, 2, 0]=500.0, [6, 2, 1]=-500.0, [6, 3, 0]=500.0, [6, 3, 1]=-500.0, [6, 4, 0]=500.0, [6, 4, 1]=-500.0, [6, 5, 0]=500.0, [6, 5, 1]=-500.0, [6, 6, 0]=-500.0, [6, 6, 1]=500.0, [6, 7, 0]=500.0, [6, 7, 1]=-500.0, [7, 0, 0]=500.0, [7, 0, 1]=-500.0, [7, 1, 0]=500.0, [7, 1, 1]=-500.0, [7, 2, 0]=500.0, [7, 2, 1]=-500.0, [7, 3, 0]=500.0, [7, 3, 1]=-500.0, [7, 4, 0]=500.0, [7, 4, 1]=-500.0, [7, 5, 0]=500.0, [7, 5, 1]=-500.0, [7, 6, 0]=500.0, [7, 6, 1]=-500.0, [7, 7, 0]=-500.0, [7, 7, 1]=500.0, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
island:1: {[Daytona Beach] [Everglades National Park] [Tallahassee] }[DenseTensor [0, 1]=-1.4668181989905504, [1, 1]=0.6487994253198823, [2, 1]=0.8953347000564058, [3, 1]=-9.283015702623675, [4, 1]=-3.2289272006559995, [5, 1]=-0.6216865387719952, [6, 1]=-3.2186865153633506, [7, 1]=0.17380859006296173, ]
kb-ignore:1: {[Atlanta] [Daytona Beach] [Everglades National Park] [Florida] [Georgia] [Key Largo] [Miami] [Tallahassee] }[DenseTensor [0, 1]=1000.0, [1, 1]=1000.0, [2, 1]=1000.0, [3, 1]=1000.0, [4, 1]=1000.0, [5, 1]=1000.0, [6, 1]=1000.0, [7, 1]=1000.0, ]
kb-Florida:1: {[Florida] }[DenseTensor [0, 0]=500.0, [0, 1]=-500.0, [1, 0]=500.0, [1, 1]=-500.0, [2, 0]=500.0, [2, 1]=-500.0, [3, 0]=-500.0, [3, 1]=500.0, [4, 0]=500.0, [4, 1]=-500.0, [5, 0]=500.0, [5, 1]=-500.0, [6, 0]=500.0, [6, 1]=-500.0, [7, 0]=500.0, [7, 1]=-500.0, ]
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
in-rel:2: TableFactor([101:relFeatures=relation_features (6208 values),])(6208 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
in-rel:2: TableFactor([101:relFeatures=relation_features (6208 values),])(6208 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
island:1: TableFactor([100:catFeatures=category_features (744 values),])(744 weights)
[[what, national, park, is, to, the, south, west, of, Miami, ?]]
Num offered: 10
1000 iterations, 127 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
5 iterations, 0 disagreements
7 iterations, 0 disagreements
18 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
15 iterations, 0 disagreements
1000 iterations, 66 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
10 word combinations
inference: [what, national, park, is, to, the, south, west, of, Miami, ?] kb-equal:2(0:kb-ignore:1(0:kb-ignore:1(0:park:1(0:<empty>)[0])[])[],1:kb-equal:2(0:<empty>,1:kb-ignore:1(0:kb-ignore:1(0:west-rel:2(0:<empty>,1:kb-ignore:1(0:kb-Miami:1(0:<empty>)[0])[])[])[])[])[])[]
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
3 iterations, 0 disagreements
9 iterations, 0 disagreements
1 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
2 iterations, 0 disagreements
1 iterations, 0 disagreements
1 iterations, 0 disagreements
